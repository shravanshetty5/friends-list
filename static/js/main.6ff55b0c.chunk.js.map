{"version":3,"sources":["+state/reducer.js","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/ErrorBoundry/error-boundry.component.jsx","components/scroll/scroll.component.jsx","components/search-box/search-box.component.jsx","App.jsx","+state/actions.js","+state/constants.js","serviceWorker.js","index.js"],"names":["initialState","searchField","Card","props","className","src","friend","id","alt","name","email","CardList","friends","length","map","key","ErrorBoundry","state","hasError","error","info","this","setState","role","aria-label","children","Component","Scroll","SearchBox","placeholder","handleChange","type","onChange","App","fetch","then","resp","json","users","onSearchChange","filteredFriends","filter","toLowerCase","includes","connect","dispatch","event","payload","target","value","Boolean","window","location","hostname","match","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sVAEMA,EAAe,CACjBC,YAAa,I,4BCAJC,G,YAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACf,yBAAKC,IAAG,+BAA0BF,EAAMG,OAAOC,GAAvC,aAAsDC,IAAI,KAC9D,4BAAKL,EAAMG,OAAOG,MAClB,2BAAIN,EAAMG,OAAOI,UCHZC,G,MAAW,SAACR,GACrB,OAAgC,IAAzBA,EAAMS,QAAQC,OAChB,yBAAKT,UAAU,WACf,yBAAKA,UAAU,aACXD,EAAMS,QAAQE,KAAI,SAACR,GAAD,OACf,kBAAC,EAAD,CAAMS,IAAKT,EAAOC,GAAID,OAAQA,UCPjCU,EAAb,kDACI,WAAYb,GAAQ,IAAD,8BACf,cAAMA,IACDc,MAAQ,CACTC,UAAU,GAHC,EADvB,8DAQsBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,MATjC,+BAaQ,OAAIG,KAAKJ,MAAMC,SACJ,wGAA6E,0BAAMK,KAAK,MAAMC,aAAW,aAA5B,iBAEjFH,KAAKlB,MAAMsB,aAhB1B,GAAkCC,aCArBC,G,MAAS,SAACxB,GACnB,OACI,yBAAKC,UAAU,UACVD,EAAMsB,YCFNG,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BAAOC,KAAK,SACR3B,UAAU,SACVyB,YAAaA,EACbG,SAAUF,MCaZG,E,kDAEJ,aAAe,IAAD,8BACZ,gBAEKhB,MAAQ,CACXL,QAAS,IAJC,E,gEAOO,IAAD,OAClBsB,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAAAG,GAAK,OAAI,EAAKhB,SAAS,CAC3BV,QAAS0B,S,+BAIJ,IACD1B,EAAYS,KAAKJ,MAAjBL,QADA,EAEgCS,KAAKlB,MAArCF,EAFA,EAEAA,YAAasC,EAFb,EAEaA,eACfC,EAAkB5B,EAAQ6B,QAAO,SAAAnC,GAAM,OAAIA,EAAOG,KAAKiC,cAAcC,SAAS1C,EAAYyC,kBAChG,OACE,yBAAKtC,UAAU,OACf,0CACE,kBAAC,EAAD,CAAWyB,YAAY,iBAAiBC,aAAcS,IACtD,kBAAC,EAAD,KACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,QAAS4B,W,GA3BXd,aAoCHkB,eA/CS,SAAA3B,GACtB,MAAO,CACLhB,YAAagB,EAAMhB,gBAII,SAAC4C,GAC1B,MAAO,CACLN,eAAgB,SAACO,GAAD,OAAWD,ECfU,CACrCd,KCH+B,sBDI/BgB,QDamDD,EAAME,OAAOC,YAuCrDL,CAA6CX,G,MG5CxCiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAQC,aVHe,WAAoC,IAAnCvC,EAAkC,uDAA5BjB,EAAcyD,EAAc,uDAAP,GACrD,OAAQA,EAAO1B,MACX,IQR2B,sBRSvB,OAAO,eAAId,EAAX,CAAkBhB,YAAawD,EAAOV,UAE1C,QACI,OAAO9B,MUDnByC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAjD,GACLkD,QAAQlD,MAAMA,EAAMmD,c","file":"static/js/main.6ff55b0c.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD } from \"./constants\";\n\nconst initialState = {\n    searchField: ''\n};\n\nexport const searchFriends = (state=initialState, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return {...state, searchField: action.payload};\n    \n        default:\n            return state;\n    }\n}","import React from \"react\";\nimport './card.styles.css';\n\nexport const Card = (props) => (\n    <div className='card-container'>\n    <img src={`https://robohash.org/${props.friend.id}?set=set1`} alt=\"\"/>\n        <h2>{props.friend.name}</h2>\n        <p>{props.friend.email}</p>\n    </div>\n);","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = (props) => {\n    return props.friends.length === 0 ? \n        (<div className='loader'></div>) :\n        (<div className='card-list'>\n            {props.friends.map((friend) => (\n                <Card key={friend.id} friend={friend}></Card>\n            ))}\n        </div>)\n};\n","import React, { Component } from 'react';\n\nexport class ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true});\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1> Looks like I messed up. Will fix this soon. Sorry for the inconvinience <span role=\"img\" aria-label=\"Thank you\">üôè</span></h1>\n        }\n        return this.props.children\n    }\n}","import React from \"react\";\nimport './scroll.styles.css';\nexport const Scroll = (props) => {\n    return (\n        <div className=\"scroll\">\n            {props.children}\n        </div>\n    );\n}","import React from \"react\";\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input type='search'\n        className='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n        />\n);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField } from './+state/actions';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { ErrorBoundry } from './components/ErrorBoundry/error-boundry.component';\nimport { Scroll } from './components/scroll/scroll.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchField\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n  }\n}\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      friends: []\n    };\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((resp) => resp.json())\n      .then(users => this.setState({\n        friends: users\n      }))\n  }\n\n  render () {\n    const { friends } = this.state;\n    const { searchField, onSearchChange } = this.props;\n    const filteredFriends = friends.filter(friend => friend.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n      <h1>My Friends</h1>\n        <SearchBox placeholder='search friends' handleChange={onSearchChange}></SearchBox>\n        <Scroll>\n        <ErrorBoundry>\n          <CardList friends={filteredFriends}></CardList>\n        </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n  \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD } from \"./constants\";\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { searchFriends } from './+state/reducer';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(searchFriends);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}