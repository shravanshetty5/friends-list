{"version":3,"sources":["+state/reducer.js","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/ErrorBoundry/error-boundry.component.jsx","components/scroll/scroll.component.jsx","components/search-box/search-box.component.jsx","App.jsx","+state/actions.js","+state/constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateFriends","isPending","friends","error","Card","props","className","src","friend","id","alt","name","email","CardList","length","map","key","ErrorBoundry","state","hasError","info","this","setState","role","aria-label","children","Component","Scroll","SearchBox","placeholder","handleChange","type","onChange","App","requestFriends","onSearchChange","filteredFriends","filter","toLowerCase","includes","connect","searchFriends","dispatch","event","payload","target","value","fetch","then","resp","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cbcb5db5.chunk.js","sourcesContent":["import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_FRIENDS_FAILED,\n  REQUEST_FRIENDS_PENDING,\n  REQUEST_FRIENDS_SUCCESS,\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: '',\n};\n\nexport const searchFriends = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nconst initialStateFriends = {\n  isPending: false,\n  friends: [],\n  error: '',\n};\n\nexport const requestFriends = (state = initialStateFriends, action = {}) => {\n  switch (action.type) {\n    case REQUEST_FRIENDS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_FRIENDS_SUCCESS:\n      return { ...state, friends: action.payload, isPending: false };\n    case REQUEST_FRIENDS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport './card.styles.css';\n\nexport const Card = (props) => (\n    <div className='card-container'>\n    <img src={`https://robohash.org/${props.friend.id}?set=set1`} alt=\"\"/>\n        <h2>{props.friend.name}</h2>\n        <p>{props.friend.email}</p>\n    </div>\n);","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = (props) => {\n    return props.friends.length === 0 ? \n        (<div className='loader'></div>) :\n        (<div className='card-list'>\n            {props.friends.map((friend) => (\n                <Card key={friend.id} friend={friend}></Card>\n            ))}\n        </div>)\n};\n","import React, { Component } from 'react';\n\nexport class ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true});\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1> Looks like I messed up. Will fix this soon. Sorry for the inconvinience <span role=\"img\" aria-label=\"Thank you\">üôè</span></h1>\n        }\n        return this.props.children\n    }\n}","import React from \"react\";\nimport './scroll.styles.css';\nexport const Scroll = (props) => {\n    return (\n        <div className=\"scroll\">\n            {props.children}\n        </div>\n    );\n}","import React from \"react\";\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input type='search'\n        className='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n        />\n);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestRobots, setSearchField } from './+state/actions';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { ErrorBoundry } from './components/ErrorBoundry/error-boundry.component';\nimport { Scroll } from './components/scroll/scroll.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchFriends.searchField,\n    friends: state.requestFriends.friends,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    requestFriends: () => dispatch(requestRobots()),\n  };\n};\nclass App extends Component {\n  componentDidMount() {\n    this.props.requestFriends();\n  }\n\n  render() {\n    const { searchField, onSearchChange, friends } = this.props;\n    const filteredFriends = friends.filter((friend) =>\n      friend.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className='App'>\n        <h1>My Friends</h1>\n        <SearchBox\n          placeholder='search friends'\n          handleChange={onSearchChange}\n        ></SearchBox>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList friends={filteredFriends}></CardList>\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_FRIENDS_FAILED,\n  REQUEST_FRIENDS_PENDING,\n  REQUEST_FRIENDS_SUCCESS,\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({\n    type: REQUEST_FRIENDS_PENDING,\n  });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then((resp) => resp.json())\n    .then((data) =>\n      dispatch({\n        type: REQUEST_FRIENDS_SUCCESS,\n        payload: data,\n      })\n    )\n    .catch((error) =>\n      dispatch({\n        type: REQUEST_FRIENDS_FAILED,\n        payload: error,\n      })\n    );\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_FRIENDS_PENDING = 'REQUEST_FRIENDS_PENDING';\nexport const REQUEST_FRIENDS_SUCCESS = 'REQUEST_FRIENDS_SUCCESS';\nexport const REQUEST_FRIENDS_FAILED = 'REQUEST_FRIENDS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { requestFriends, searchFriends } from './+state/reducer';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({ searchFriends, requestFriends });\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}